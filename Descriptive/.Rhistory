# [1] "numeric"
#
# $id
# [1] "integer"
#
# $favorite_count
# [1] "integer"
#
# $verified
# [1] "character"
#
# $sentiment
# [1] "integer"
#
# $profile_text_color
# [1] "character"
#
# $profile_image_url_https
# [1] "character"
#
# $retweeted
# [1] "character"
#
# $is_translator
# [1] "character"
#
# $source
# [1] "character"
#
# $followers_count
# [1] "integer"
#
# $protected
# [1] "character"
#
# $in_reply_to_screen_name
# [1] "character"
#
# $in_reply_to_user_id
# [1] "integer"
#
# $default_profile_image
# [1] "character"
#
# $retweet_count
# [1] "integer"
#
# $id_str
# [1] "integer"
#
# $favorited
# [1] "character"
#
# $utc_offset
# [1] "integer"
#
# $statuses_count
# [1] "integer"
#
# $profile_background_color
# [1] "character"
#
# $friends_count
# [1] "integer"
#
# $profile_background_image_url_https
# [1] "character"
#
# $profile_link_color
# [1] "character"
#
# $profile_image_url
# [1] "character"
#
# $notifications
# [1] "logical"
#
# $geo_enabled
# [1] "character"
#
# $profile_banner_url
# [1] "character"
#
# $in_reply_to_user_id_str
# [1] "integer"
#
# $profile_background_image_url
# [1] "character"
#
# $lang
# [1] "character"
#
# $profile_background_tile
# [1] "character"
#
# $favourites_count
# [1] "integer"
#
# $screen_name
# [1] "character"
#
# $url
# [1] "character"
#
# $created_at
# [1] "character"
#
# $contributors_enabled
# [1] "character"
#
# $location
# [1] "character"
#
# $filter_level
# [1] "character"
#
# $in_reply_to_status_id_str
# [1] "numeric"
#
# $profile_sidebar_border_color
# [1] "character"
#
# $place
# [1] "character"
#
# $default_profile
# [1] "character"
#
# $following
# [1] "logical"
#
# $listed_count
# [1] "integer"
summary(favorite_count)
#==============
# Sentiment
#==============
summary(sentiment)
table(sentiment)
#==============
# Followers count
#==============
summary(followers_count)
# percentage of followers number that exceeds 1000
sum(followers_count>5000)/Num
summary(statuses_count)
summary(friends_count)
summary(favourites_count)
sum(geo_enabled="True")/Size[1]
geo_enabled
sum(lang=="en")/Size[1]
sum(geo_enabled="True")/Size[1]
geo_enabled
sum(geo_enabled == "True")/Size[1]
location[lang=="en"]
location[lang=="en"]==""
sum(location[lang=="en"]=="")
listed_count
# remove all the variables in the environment
rm(list=ls())
#==========================================#
# import csv file
#==========================================#
t2<-read.csv("twitter_file_with_text.csv",fill=T, sep=",", stringsAsFactors = FALSE)
class(t2)
names(t2)
# [1] "follow_request_sent"                "contributors"
# [3] "truncated"                          "profile_use_background_image"
# [5] "profile_sidebar_fill_color"         "time_zone"
# [7] "in_reply_to_status_id"              "id"
# [9] "favorite_count"                     "verified"
# [11] "sentiment"                          "profile_text_color"
# [13] "profile_image_url_https"            "retweeted"
# [15] "is_translator"                      "source"
# [17] "followers_count"                    "protected"
# [19] "in_reply_to_screen_name"            "in_reply_to_user_id"
# [21] "default_profile_image"              "retweet_count"
# [23] "id_str"                             "favorited"
# [25] "utc_offset"                         "statuses_count"
# [27] "profile_background_color"           "friends_count"
# [29] "profile_background_image_url_https" "profile_link_color"
# [31] "profile_image_url"                  "notifications"
# [33] "geo_enabled"                        "profile_banner_url"
# [35] "in_reply_to_user_id_str"            "profile_background_image_url"
# [37] "lang"                               "profile_background_tile"
# [39] "favourites_count"                   "screen_name"
# [41] "url"                                "created_at"
# [43] "contributors_enabled"               "location"
# [45] "filter_level"                       "in_reply_to_status_id_str"
# [47] "profile_sidebar_border_color"       "place"
# [49] "default_profile"                    "following"
# [51] "listed_count"
# attach
attach(t2)
Size<-dim(t2)
#==========================================#
# Descriptive statistics
#==========================================#
lapply(t2, class)
# $follow_request_sent
# [1] "logical"
#
# $contributors
# [1] "logical"
#
# $truncated
# [1] "character"
#
# $profile_use_background_image
# [1] "character"
#
# $profile_sidebar_fill_color
# [1] "character"
#
# $time_zone
# [1] "character"
#
# $in_reply_to_status_id
# [1] "numeric"
#
# $id
# [1] "integer"
#
# $favorite_count
# [1] "integer"
#
# $verified
# [1] "character"
#
# $sentiment
# [1] "integer"
#
# $profile_text_color
# [1] "character"
#
# $profile_image_url_https
# [1] "character"
#
# $retweeted
# [1] "character"
#
# $is_translator
# [1] "character"
#
# $source
# [1] "character"
#
# $followers_count
# [1] "integer"
#
# $protected
# [1] "character"
#
# $in_reply_to_screen_name
# [1] "character"
#
# $in_reply_to_user_id
# [1] "integer"
#
# $default_profile_image
# [1] "character"
#
# $retweet_count
# [1] "integer"
#
# $id_str
# [1] "integer"
#
# $favorited
# [1] "character"
#
# $utc_offset
# [1] "integer"
#
# $statuses_count
# [1] "integer"
#
# $profile_background_color
# [1] "character"
#
# $friends_count
# [1] "integer"
#
# $profile_background_image_url_https
# [1] "character"
#
# $profile_link_color
# [1] "character"
#
# $profile_image_url
# [1] "character"
#
# $notifications
# [1] "logical"
#
# $geo_enabled
# [1] "character"
#
# $profile_banner_url
# [1] "character"
#
# $in_reply_to_user_id_str
# [1] "integer"
#
# $profile_background_image_url
# [1] "character"
#
# $lang
# [1] "character"
#
# $profile_background_tile
# [1] "character"
#
# $favourites_count
# [1] "integer"
#
# $screen_name
# [1] "character"
#
# $url
# [1] "character"
#
# $created_at
# [1] "character"
#
# $contributors_enabled
# [1] "character"
#
# $location
# [1] "character"
#
# $filter_level
# [1] "character"
#
# $in_reply_to_status_id_str
# [1] "numeric"
#
# $profile_sidebar_border_color
# [1] "character"
#
# $place
# [1] "character"
#
# $default_profile
# [1] "character"
#
# $following
# [1] "logical"
#
# $listed_count
# [1] "integer"
summary(favorite_count)
#==============
# Sentiment
#==============
summary(sentiment)
table(sentiment)
#==============
# Followers count
#==============
summary(followers_count)
# percentage of followers number that exceeds 1000
sum(followers_count>5000)/Num
summary(statuses_count)
summary(friends_count)
summary(favourites_count)
summary(listed_count)
sum(geo_enabled == "True")/Size[1]
#==============
# Get geographical data
#==============
# Check version of R, becasue ggmap require R version higher than 3.4.3
#R.Version()
#install.packages("ggmap")
library(ggmap)
ntime_zone <-time_zone[geo_enabled == "True"]
ntime_zone
temp <-time_zone[geo_enabled == "True"]
ntime_zone <-temp[temp!=""]
ntime_zone
Num = length(ntime_zone)
Num
# Initialize the data frame
lon <- vector(mode="numeric", length=Num)
lat <- vector(mode="numeric", length=Num)
geoAddress <- vector(mode="character", length=Num)
for(i in 1:Num)
{
result <- tryCatch(geocode(ntime_zone[i], output = "latlona", source = "google"),
warning = function(w) data.frame(lon = NA, lat = NA, address = NA))
lon[i] <- as.numeric(result[1])
lat[i] <- as.numeric(result[2])
geoAddress[i] <- as.character(result[3])
}
geocoded <- data.frame(ntime_zone, lon, lat, geoAddress)
#==============
# Save geographical data
#==============
# Write a CSV file containing origAddress to the working directory
write.csv(geocoded, "geocoded.csv", row.names=FALSE)
#==============
# Plot Map
#==============
#install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, asp = 1)
points(geocoded$lon, geocoded$lat, col = "red", cex = .6)
newmap <- getMap(resolution = "high")
install.packages("rworldxtra")
#install.packages("rworldxtra")
library(rworldxtra)
newmap <- getMap(resolution = "high")
jpeg('geoplot.jepg')
plot(newmap, asp = 1)
points(geocoded$lon, geocoded$lat, col = "red", cex = .6)
dev.off()
newmap <- getMap(resolution = "high")
jpeg('geoplot.jpeg')
plot(newmap, asp = 1)
points(geocoded$lon, geocoded$lat, col = "red", cex = .6)
dev.off()
Size[1]
Size
geocoded<-read.csv("geocoded.csv",fill=T, sep=",", stringsAsFactors = FALSE)
geocoded
geocoded$lon
sentiment
knitr::opts_chunk$set(echo = TRUE)
hist(sentiment, freq=F, xlim=c(-12,9), breaks=seq(from=-12,to=9,by=5),main="Sentiment Histogram", col=c(2,3),xlab="Sentiment")
hist(sentiment, freq=F, xlim=c(-12,9), breaks=seq(from=-12,to=9,by=5),main="Sentiment Histogram", col=c(2,3),xlab="Sentiment")
hist(sentiment)
hist(sentiment, freq=F,main="Sentiment Histogram", col=c(2,3),xlab="Sentiment")
lines(density(Sentiment),col=2,lwd=3)
lines(density(sentiment),col=2,lwd=3)
lines(density(sentiment))
density(sentiment)
lines(density(sentiment))
hist(sentiment, freq=T,main="Sentiment Histogram", col=c(2,3),xlab="Sentiment")
hist(sentiment, freq=F,main="Sentiment Histogram", col=c(2,3),xlab="Sentiment")
sentiment
hist(sentiment, freq=T,main="Sentiment Histogram", breaks=seq(from=-12.5,to=9.5,by=1),xlab="Sentiment")
hist(sentiment, freq=T,main="Sentiment Histogram", breaks=seq(from=-12.5,to=9.5,by=1),xlab="Sentiment")
hist(sentiment, freq=F, main="Sentiment Histogram", breaks=seq(from=-12.5,to=9.5,by=1),xlab="Sentiment")
hist(sentiment, freq=F, main="Sentiment Histogram", breaks=seq(from=-12.5,to=9.5,by=1), col=c(2,3), xlab="Sentiment")
table(sentiment)
# Add the line of density, "col" for color, "lwd" for line width
lines(density(Sentiment))
# Add the line of density, "col" for color, "lwd" for line width
lines(density(sentiment))
# Add the line of density, "col" for color, "lwd" for line width
lines(density(sentiment),col=2,lwd=3)
jpeg("sentiment_hist.jpeg")
hist(sentiment, freq=F, main="Sentiment Histogram", breaks=seq(from=-12.5,to=9.5,by=1), col=c(2,3), xlab="Sentiment")
# Add the line of density, "col" for color, "lwd" for line width
lines(density(sentiment),col=2,lwd=3)
dev.off()
sum(sentiment==0)/Size[1]
hist(followers_count, freq=F, main="Follower Count Histogram", col=c(2,3), xlab="Sentiment")
quantile(followers_count)
boxplot(followers_count)
boxplot(log(followers_count))
qqplot(followers_count)
?qqplot
qqnorm(followers_count)
qqnorm(log(followers_count))
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
library(logspline)
install.packages("logspline")
descdist(followers_count, discrete = FALSE)
jpeg("CF_graph.jpeg")
descdist(followers_count, discrete = FALSE)
dev.off()
descdist(log(followers_count), discrete = FALSE)
log(followers_count)
fit.beta <- fitdist(x, "beta")
fit.beta <- fitdist(followers_count, "beta")
followers_count2<-followers_count[followers_count!=0]
descdist(followers_count2, discrete = FALSE)
quantile(followers_count2)
descdist(log(followers_count2), discrete = FALSE)
boxplot(followers_count2)
boxplot(log(followers_count2))
followers_count2<-log(followers_count[followers_count!=0])
summary(followers_count2)
quantile(followers_count2)
#
hist(followers_count2)
jpeg("log_folloer_count_hist.jpeg")
hist(followers_count2, freq=F, main="Sentiment Histogram", breaks=seq(from=0,to=15,by=1), col=c(2,3), xlab="log(#Follower)")
# Add the line of density, "col" for color, "lwd" for line width
lines(density(followers_count2),col=2,lwd=3)
dev.off()
#
jpeg("CF_graph2.jpeg")
descdist(log(followers_count2), discrete = FALSE)
dev.off()
followers_count2
#
jpeg("CF_graph2.jpeg")
descdist(log(followers_count2), discrete = FALSE)
descdist(log(followers_count2), discrete = FALSE)
length(followers_count2)
descdist(log(followers_count2), discrete = FALSE)
descdist(followers_count2, discrete = FALSE)
dev.off()
fit.weibull <- fitdist(followers_count2, "weibull")
fit.norm <- fitdist(followers_count2, "norm")
plot(fit.norm)
?descdist
